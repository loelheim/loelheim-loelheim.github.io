{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2021_11/03_gatsby_customization_1_writing/",
    "result": {"data":{"site":{"siteMetadata":{"title":"loelheim"}},"markdownRemark":{"id":"b1b8261f-595f-58e0-9cdd-ab41d00780da","excerpt":"…","html":"<h3 id=\"1-들어가기에-앞서\" style=\"position:relative;\"><a href=\"#1-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"1 들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 들어가기에 앞서</h3>\n<p>지금까지 변경한 내용은 기본적인 파일을 수정하는 것에 불과하다.\n하지만 스타터로 시작했음에도 불구하고 여전히 타 블로그 플랫폼에 비하면 제공하는 것이 너무나도 적다.</p>\n<p>그래서 직접 코드를 추가해야만 제대로 된 기능을 사용할 수 있다.\n간단하게 글 쓰기 위해 시작한 것이지만 오히려 커스터마이징을 위해 삽질하는 꼴이라니 … 어쨋거나 시작한 이상 끝을 봐야겠다.</p>\n<h3 id=\"2-블로그-템플릿\" style=\"position:relative;\"><a href=\"#2-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%85%9C%ED%94%8C%EB%A6%BF\" aria-label=\"2 블로그 템플릿 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 블로그 템플릿</h3>\n<p><code class=\"language-text\">templates/blog-post.js</code>는 포스트의 레이아웃을 지정하는 레이아웃 파일이다.\n여기에 코드를 추가하여 원하는 형태의 페이지를 구성할 수 있다.</p>\n<h3 id=\"3-추가할-기능-리스트업\" style=\"position:relative;\"><a href=\"#3-%EC%B6%94%EA%B0%80%ED%95%A0-%EA%B8%B0%EB%8A%A5-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%97%85\" aria-label=\"3 추가할 기능 리스트업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 추가할 기능 리스트업</h3>\n<p>작업하기 전에 내가 원하는 기능을 먼저 나열해보는 것이 좋을 것 같다.\n이전에 봤던 스타터에서 참고하여 내가 추가하고자 하는 기능을 나열해봤다.</p>\n<ul>\n<li>글쓰기 기능 추가</li>\n<li>TOC - Table of Contents</li>\n<li>태그 관련 기능</li>\n<li>댓글</li>\n<li>검색</li>\n</ul>\n<p>어떤 기능을 구현하려고 하더라도 글 작성이 되어야 다른 작업들이 가능하기 때문에 글쓰기 기능부터 추가하는 것이 좋을 것 같다.</p>\n<h3 id=\"4-글쓰기-기능-분석\" style=\"position:relative;\"><a href=\"#4-%EA%B8%80%EC%93%B0%EA%B8%B0-%EA%B8%B0%EB%8A%A5-%EB%B6%84%EC%84%9D\" aria-label=\"4 글쓰기 기능 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 글쓰기 기능 분석</h3>\n<p>블로그 데이터는 <code class=\"language-text\">content/blog</code> 하위에 있으며, 두 가지 방식으로 구성 가능하다.</p>\n<ul>\n<li><code class=\"language-text\">{블로그 제목}</code> 으로 폴더 이름을 정하고 하위에 <code class=\"language-text\">index.md</code> 파일을 추가하는 방식</li>\n<li><code class=\"language-text\">{블로그 제목}.md</code> 단일 파일 방식</li>\n</ul>\n<p>첨부 파일을 포스트마다 관리하려면 폴더 형태로 관리하는 방식이 조금 더 나아보인다.</p>\n<p>이미 지웠을지도 모르겠지만 <code class=\"language-text\">content/blog</code>에 있던 샘플 포스트를 보다보면 <code class=\"language-text\">--- ~ ---</code> 사이에 포스트의 요약 정보를 표현하는 데이터가 존재한다. 예를 들면 이런 식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span>\n<span class=\"token font-matter yaml language-yaml\">title: 개츠비로 블로그 시작하기 - 플랫폼 선정\ndescription: 개츠비로 시작하는 블로그, 어떤 플랫폼이 좋을까?\ndate: 2021-11-23T16:24:42.627Z</span>\n<span class=\"token punctuation\">---</span></span></code></pre></div>\n<p>해당 정보를 <code class=\"language-text\">Frontmatter</code>라고 하는 것 같다.\n<code class=\"language-text\">gatsby-node.js</code>의 <code class=\"language-text\">createSchemaCustomization</code>에 선언된 <code class=\"language-text\">Frontmatter</code> 스키마로 형태가 정의되는데, 스키마를 확장하여 태그를 지정하고 그에 맞는 템플릿을 불러오도록 하는 경우도 있다.</p>\n<p>블로그의 메타 데이터를 기록하는 것을 포함하여 제목을 여기서 새로 정의하는 것도 가능하다.\n하지만 <code class=\"language-text\">Frontmatter</code>에서 제목을 수정하더라도 접근 경로는 파일명으로 접근 가능하니 이 부분은 알아두면 좋다.</p>\n<p>결국에 글쓰기 기능이라는 것은 아래 두 가지를 구현하면 된다.</p>\n<ul>\n<li>블로그 작성에 필요한 폴더 추가 및 <code class=\"language-text\">index.md</code> 추가</li>\n<li><code class=\"language-text\">Frontmatter</code>를 자동으로 추가해주는 스크립트 혹은 기능</li>\n</ul>\n<p>참고로 공식 홈페이지에서 <a href=\"https://www.gatsbyjs.com/plugins/?=frontmatter\">관련 플러그인 라이브러리를 찾아보니</a> 마땅한 것은 없었고, 스타터를 여럿 분석하다보니 <code class=\"language-text\">Frontmatter</code>를 포함해서 글을 작성해주는 기능을 <a href=\"https://github.com/JaeYeopHan/gatsby-post-gen\">gatsby-post-gen</a> 라는 별도로 분리된 플러그인을 찾았다.\n<code class=\"language-text\">개츠비</code>에 대한 의존성도 없어보였고, 해당 플러그인을 설치하고 관련 커맨드를 추가하면 쉽게 사용할 수 있다.</p>\n<p><del>하지만 해당 플러그인은 추후에 구현할 태그에 대한 메타 정보를 추가하려면 수정이 필요했고, 카테고리의 물리적 경로와 메타 정보가 결합된 구조인 것 같아서 새로 만드는게 좋겠다고 생각했다.</del></p>\n<p>원래 카테고리라는 필드를 새로 파서 할당하는 식으로 구성하려고 했는데, 블로그 컴파일 타임 시점 외에는 <code class=\"language-text\">개츠비</code>의 정보를 받아올 방법이 없었다. <code class=\"language-text\">GraphQL</code>로 다 되는줄 알았는데 구현해놓고 보니 아래 같은 에러가 뜬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/Users/loel/Documents/blog/loelheim/node_modules/gatsby/cache-dir/commonjs/gatsby-browser-entry.js:106\n  throw new Error(`It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` + `are supposed to only be evaluated at compile time, and then compiled away. ` + `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` + `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`);\n        ^\n\nError: It appears like Gatsby is misconfigured. Gatsby related `graphql` calls are supposed to only be evaluated at compile time, and then compiled away. Unfortunately, something went wrong and the query was left in the compiled code.\n\nUnless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.\n    at graphql (/Users/loel/Documents/blog/loelheim/node_modules/gatsby/cache-dir/commonjs/gatsby-browser-entry.js:106:9)\n    at inquiryCategory (/Users/loel/Documents/blog/loelheim/scripts/frontman/index.js:90:40)\n    at /Users/loel/Documents/blog/loelheim/scripts/frontman/index.js:203:28\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)</code></pre></div>\n<p>뭔가 컴파일 처리가 된 시점에만 설정같은게 잘 동작하는 구조이며, 서버를 띄웠을 때 쿼리에 응답할 수 있는 것 같으니 아쉽지만 이 기능은 생략해야 할 것 같다.</p>\n<p>참고로 전반적인 구조와 코드에 대해서는 후술하겠지만, 대략 이런 코드를 작성하려고 했었다. 쿼리는 에디터에서 잘 동작했었기 때문에 나름 아쉬웠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inquiryCategory</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">useStaticQuery</span><span class=\"token punctuation\">(</span>graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        query {\n          allMarkdownRemark {\n            edges {\n              node {\n                frontmatter {\n                  category\n                }\n              }\n            }\n          }\n        }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> categories <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">edge</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>category<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> choices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">CATEGORY_NEW</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>categories<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> category <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> inquirer<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'category'</span><span class=\"token punctuation\">,</span>\n        choices\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>category <span class=\"token operator\">!==</span> <span class=\"token constant\">CATEGORY_NEW</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> newCategory <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> inquirer<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'newCategory'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">validate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">'⚠️  category is empty !'</span>   \n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token constant\">CATEGORY_NEW</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">'⚠️  category is invalid !'</span>   \n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>categories<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">'⚠️  same category already exists !'</span>   \n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> newCategory\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> category\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>어쨋거나 글쓰기 기능에 필요한 부분을 검토해보면 아래 프로세스와 같이 진행되면 될 것으로 보인다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">Frontmatter</code>를 구성하는 데이터를 입력받을 수 있도록 cli 형태로 구성한다.</p>\n<ul>\n<li>제목 (String) : 필수로 입력하도록 유도</li>\n<li>설명 (String?) : 빈 값이어도 통과</li>\n<li>파일명 (String) : 빈 값이면 제목을 활용하며, 파일 경로로 적합하지 않으면 재입력</li>\n<li>날짜 (String) : 포스트를 생성하는 시점에 자동 생성하여 ISO 포맷으로 생성</li>\n<li>태그 (Array<String>?) : <code class=\"language-text\">,</code> 단위로 분리하고 양 끝에 포함된 공백만 제거</li>\n</ul>\n</li>\n<li>\n<p>입력받은 데이터와 포맷을 고려하여 새로운 포스트를 위한 폴더와 파일을 생성한다.</p>\n</li>\n<li>\n<p>cli 커맨드로 위 프로세스가 실행될 수 있도록 연결한다.</p>\n</li>\n</ul>\n<p>대략적으로 입력한 결과에 유형별로 검증 메서드를 인자로 제공하고 정제하는 과정을 거친 결과를 모아둔 후, 이 결과를 바탕으로 폴더랑 파일을 생성하고 <code class=\"language-text\">Frontmatter</code>를 추가하면 끝날 것 같다.</p>\n<h3 id=\"5-글쓰기-기능-구현\" style=\"position:relative;\"><a href=\"#5-%EA%B8%80%EC%93%B0%EA%B8%B0-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84\" aria-label=\"5 글쓰기 기능 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 글쓰기 기능 구현</h3>\n<p>모든 개발 작업에서 가장 어려운 부분은 <code class=\"language-text\">작명</code>이다.</p>\n<p>일단 블로그에 필요한 가장 처음 단계에 해당하기도 하고, <code class=\"language-text\">Frontmatter</code>랑 비슷하게 이름 지으려고 하다보니 <code class=\"language-text\">Frontman</code>이 생각났다.\n그래서 <code class=\"language-text\">scripts/frontman</code> 폴더를 추가하고 안에 <code class=\"language-text\">index.js</code> 파일을 추가했다.</p>\n<p>그 다음에는 <code class=\"language-text\">npm</code> 커맨드를 추가했다.\n<code class=\"language-text\">script</code> 블록에 <code class=\"language-text\">\"post\": \"node scripts/frontman\",</code>를 추가하면 <code class=\"language-text\">npm run post</code>로 <code class=\"language-text\">index.js</code>의 내용을 수행할 수 있다.</p>\n<p>이제 <code class=\"language-text\">Frontmatter</code> 스키마에 정보를 추가할 차례다.</p>\n<p><code class=\"language-text\">gatsby-node.js</code>의 <code class=\"language-text\">createSchemaCustomization</code>에 있는 <code class=\"language-text\">createTypes</code>을 보면 관련 스키마가 정의되어 있는 것을 볼 수 있다. 여기에 <code class=\"language-text\">tags</code> 정보를 추가하면 끝이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type Frontmatter {\n  title: String\n  description: String\n  tags: [String]\n  date: Date @dateformat\n}</code></pre></div>\n<p>다음은 로직의 기본적인 뼈대를 보자. 필요한 정보들을 사용자에게 전달받아서 파일을 생성하는 단순한 구조라 보면 되겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">inquiryTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> description <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">inquiryDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">inquiryPath</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> tags <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">inquiryTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> frontmatter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">,</span>\n        description<span class=\"token punctuation\">,</span>\n        tags<span class=\"token punctuation\">,</span>\n        date\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">createFrontmatter</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> frontmatter<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음은 제목을 입력받는 메서드인 <code class=\"language-text\">inqueryTitle</code>를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inquiryTitle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> inquirer<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n         type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n         name<span class=\"token operator\">:</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span>\n         <span class=\"token function-variable function\">validate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value <span class=\"token operator\">||</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">'⚠️  title is empty !'</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">||</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">'⚠️  title is invalid !'</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n         <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> title<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>입력을 받기 위해서 <code class=\"language-text\">inquirer</code>를 사용했는데, 이미 <code class=\"language-text\">개츠비</code>에서 쓰고 있어서 별도로 의존성을 설치할 필요는 없었다.\n이번 글쓰기 기능 추가를 위해 <code class=\"language-text\">inquirer</code>를 사용하는데 있어서 주로 관심을 가질만한 부분은 다음과 같다.</p>\n<ul>\n<li>type: 입력 형식을 의미하며 <code class=\"language-text\">input</code>, <code class=\"language-text\">list</code> 만으로도 충분히 구현 가능</li>\n<li>name: 입력할 데이터의 키 값을 의미하며, 받아온 결과를 <code class=\"language-text\">구조 분해 - destructuring</code>할 값으로 사용</li>\n<li>validate: 들어온 값을 검증할 목적으로 사용하며, <code class=\"language-text\">return true</code>를 받지 않는 경우에 대해서는 안내 메시지로 튕긴 후 재입력을 받도록 함</li>\n<li>default : 입력 시 기본 값을 지정</li>\n<li>choices: <code class=\"language-text\">type = list</code>일 때, 선택할 목록을 지정</li>\n</ul>\n<p>모든 데이터가 위 내용으로 충분히 커버되기 때문에 이후에는 이와 관련된 로직을 따로 설명하진 않을 것이다.\n<code class=\"language-text\">title</code>을 경로로 사용하게 된다면 <code class=\"language-text\">현재 폴더 - .</code>와 <code class=\"language-text\">상위 폴더 - ..</code>를 사용할 수 없기 때문에 이에 대한 로직만 추가했다.</p>\n<p>다음은 <code class=\"language-text\">description</code> 내용이며, 해당 정보는 필수가 아니기 때문에 별다른 로직이 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inquiryDescription</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> description <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> inquirer<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'description'</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">return</span> description<span class=\"token operator\">?.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그나마 작업을 하는데 공을 들였던(?) 파일 경로 설정이다.\n기존 스타터는 제목을 정규화하고 불필요한 텍스트를 제거해서 파일으로 사용했는데, 나는 직접 입력받기로 했으며 아래 내용을 고려했었다.</p>\n<ul>\n<li>직접 파일명을 지정하고 싶었으며, 귀찮을 것을 대비해 제목을 <code class=\"language-text\">default</code> 인자로 제공하여 기본값을 세팅하면 좋겠다</li>\n<li>포스트마다 폴더 단위로 구성하고 그 안에 리소스가 있었으면 하는 생각이 들어 단일 파일 구조보다는 폴더 구조를 고려했다</li>\n<li>이런 구조의 특성상 경로 중복 체크도 포함되면 좋겠단 생각이 들었다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inquiryPath</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> date</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pathname <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> inquirer<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'pathname'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> title<span class=\"token punctuation\">,</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">'pathname (alphanumeric except some special characters): '</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">validate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">'⚠️  pathname is empty !'</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">validPath</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">'⚠️  pathname is invalid !'</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">const</span> destination <span class=\"token operator\">=</span> <span class=\"token function\">buildDestinationPath</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\n                fs<span class=\"token punctuation\">.</span><span class=\"token function\">accessSync</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">.</span>constants<span class=\"token punctuation\">.</span><span class=\"token constant\">R_OK</span> <span class=\"token operator\">|</span> fs<span class=\"token punctuation\">.</span>constants<span class=\"token punctuation\">.</span><span class=\"token constant\">W_OK</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">'⚠️  pathname is in use !'</span>\n\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">refinePath</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>alpha-numeric 값과 일부 값만 허용한다고 안내를 했으나 사실 정규식으로 허용하는 문자열을 상당히 제한했으며, 이는 <code class=\"language-text\">validPath</code>와 <code class=\"language-text\">refinePath</code>에 잘 녹여져 있다.\n정규식에서는 숫자, 영어, 한글, 공백, 소괄호 및 하이픈만 허용하기로 했으며, 마지막에서 정제할 때 해당 문자를 모두 언더스코어로 대체하게끔 구성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> directory <span class=\"token operator\">=</span> <span class=\"token string\">'/content/blog'</span>\n<span class=\"token keyword\">const</span> regexPath <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[0-9a-zA-Z가-힣 \\(\\)\\-_]+$</span><span class=\"token regex-delimiter\">/</span></span>\n<span class=\"token keyword\">const</span> regexToRefine <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^0-9a-zA-Z가-힣 \\(\\)\\-]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">validPath</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> regexPath<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">refinePath</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>regexToRefine<span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">buildDestinationPath</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pathname<span class=\"token punctuation\">,</span> date</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> directory<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> pathname<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">buildDestinationPath</code>에서는 날짜를 받아서 처리하는데, 아무래도 상위에 카테고리가 없는 구조로 작업하다보니 너무 파일이 관리가 안될 것 같다는 생각에 <code class=\"language-text\">작성연월</code>까지만 폴더 단위로 구성하기로 생각했고 해당 경로가 있는지 여부를 <code class=\"language-text\">fs.accessSync</code>로 체크했다.</p>\n<p>거의 다 끝났다. 태그는 <code class=\"language-text\">inquirer</code>의 도움을 받기 쉽지 않아서 단일 문자열로 받고 정제해서 사용하기로 했다. 가장 간편한건 콤마로 구분하고 공백을 제거하여 배열 형태로 구성하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inquiryTags</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> tags <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> inquirer<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'tags'</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">'tags (multiple tags concatenated with comma): '</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">validate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">'⚠️  tag string is empty !'</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> tags<span class=\"token operator\">?.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span> <span class=\"token operator\">=></span> tag<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>최소한 태그를 하나 이상 지정하여 카테고리의 역할을 겸하도록 했으며, 들어온 문자열을 콤마로 구분한 후 <code class=\"language-text\">trim</code> 메서드로 공백을 제거하면 간단하게 해결된다.</p>\n<p>마지막으로 실제로 생성하는 로직이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createFromTemplate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">frontmatter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">---\ntitle: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\ndescription: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>frontmatter<span class=\"token punctuation\">.</span>description<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\ntags: [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>frontmatter<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]\ndate: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>frontmatter<span class=\"token punctuation\">.</span>date<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n---</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">printFrontmatter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">frontmatter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> > title: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> > description: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>frontmatter<span class=\"token punctuation\">.</span>description <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> > tags: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>frontmatter<span class=\"token punctuation\">.</span>tags<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> > date: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>frontmatter<span class=\"token punctuation\">.</span>date<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> 🚀  now your new post is ready !</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">]</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createFrontmatter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pathname<span class=\"token punctuation\">,</span> frontmatter<span class=\"token punctuation\">,</span> date</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> <span class=\"token function\">createFromTemplate</span><span class=\"token punctuation\">(</span>frontmatter<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> destination <span class=\"token operator\">=</span> <span class=\"token function\">buildDestinationPath</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> filepath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> <span class=\"token string\">'index.md'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirSync</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> recursive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">printFrontmatter</span><span class=\"token punctuation\">(</span>frontmatter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'🚨  something went wrong !'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>전달받은 정보를 형식에 맞게 채워넣어 <code class=\"language-text\">Frontmatter</code> 정보를 생성하고 지정한 경로 및 파일 이름의 폴더를 만든 다음 <code class=\"language-text\">index.md</code>에 생성한 데이터를 써넣으면 모든 과정이 끝난다.\n그 외의 나머지 내용은 보기 좋으라고 만든 것이니 생략 …</p>\n<p>얼추 글쓰기는 완료된 것 같으니 <code class=\"language-text\">TOC - Table of Contents</code> 기능을 추가해보자.</p>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h3>\n<ul>\n<li><a href=\"https://github.com/JaeYeopHan/gatsby-post-gen\">https://github.com/JaeYeopHan/gatsby-post-gen</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#1-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\">1. 들어가기에 앞서</a></li>\n<li><a href=\"#2-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%85%9C%ED%94%8C%EB%A6%BF\">2. 블로그 템플릿</a></li>\n<li><a href=\"#3-%EC%B6%94%EA%B0%80%ED%95%A0-%EA%B8%B0%EB%8A%A5-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%97%85\">3. 추가할 기능 리스트업</a></li>\n<li><a href=\"#4-%EA%B8%80%EC%93%B0%EA%B8%B0-%EA%B8%B0%EB%8A%A5-%EB%B6%84%EC%84%9D\">4. 글쓰기 기능 분석</a></li>\n<li><a href=\"#5-%EA%B8%80%EC%93%B0%EA%B8%B0-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84\">5. 글쓰기 기능 구현</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>","frontmatter":{"title":"개츠비로 블로그 시작하기 - 커스터마이징 (1)","date":"2021-11-26T12:36:31.057Z","description":"개츠비로 시작하는 블로그, 글쓰기 기능을 추가해보자","tags":["gatsby","개츠비","blog","블로그","글쓰기"]}},"previous":{"fields":{"slug":"/2021_11/02_gatsby_personalization/"},"frontmatter":{"title":"개츠비로 블로그 시작하기 - 개인화"}},"next":{"fields":{"slug":"/2021_11/04_gatsby_customization_2_toc/"},"frontmatter":{"title":"개츠비로 블로그 시작하기 - 커스터마이징 (2)"}}},"pageContext":{"id":"b1b8261f-595f-58e0-9cdd-ab41d00780da","previousPostId":"d0229a72-199f-5206-8a55-d87c76514208","nextPostId":"f84ec0e5-c2a8-5b1e-99c4-62eb393a97e6"}},
    "staticQueryHashes": ["3000541721","3274528899"]}